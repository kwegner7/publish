#!/bin/bash

################################################################################
# Check the git repositories
#
# Invocation:
#     check_git.bsh
################################################################################

################################################################################
# check_git
################################################################################
function check_git()
{
    echo -e "\nChecking GIT ..."

    declare -ax REPOSITORIES=(
      "camp"
      "finance"
      "pictures"
      "website"
    )
    declare -ax REPOSITORIES=(`find /home/orig/proj -iname '.git'`)

    IFS=$'\n'
    for GIT in ${REPOSITORIES[*]}
    do
        declare FULLPATH=`dirname ${GIT}`
        if [[ -e ${FULLPATH} ]]
        then 
            pushd ${FULLPATH} 1> /dev/null
            echo -e "\n_________________________________________________"
            echo -e "The .git repository at ${FULLPATH}"
            declare -i IS_COMMITTED=$(git status --porcelain | wc --lines)
            if (( $IS_COMMITTED == 0 ))
            then
                echo -e "ALL CHANGES AT ORIGIN HAVE BEEN COMMITTED\n"

                declare -a REMOTE_VERBOSE=(\
                    `git remote --verbose | grep '(push)'| tr '\t' ' '`)
                for ITEM in ${REMOTE_VERBOSE[*]}
                do
                   declare REMOTE_NAME=$(echo $ITEM | cut -d' ' -f1)
                   declare REMOTE_LOCATION=$(echo $ITEM | cut -d' ' -f2)
                   echo -e "    Checking remote \"$REMOTE_NAME\" at $REMOTE_LOCATION"
                   if [[ "${REMOTE_NAME}" == backup ]] || [[ "${REMOTE_NAME}" == backup ]]
                   then
                       git push ${REMOTE_NAME} 2>&1 | sed 's/^/       /'

                       if [[ -d ${REMOTE_LOCATION} ]]
                       then
                           pushd ${REMOTE_LOCATION} 1> /dev/null
                           declare -a ORIGIN_VERBOSE=(\
                               `git remote --verbose | grep '(push)'| tr '\t' ' '`)
                           for ORIG in ${ORIGIN_VERBOSE[*]}
                           do
                               declare ORIGIN_NAME=$(echo $ORIG | cut -d' ' -f1)
                               declare ORIGIN_LOCATION=$(echo $ORIG | cut -d' ' -f2)
                               echo -en "       This remote has remote \"$ORIGIN_NAME\" "
                               echo -e "at $ORIGIN_LOCATION"
                           done
                           popd 1> /dev/null
                       fi
                   fi
                done
            else
                echo -e "THESE CHANGES AT ORIGIN HAVE NOT BEEN COMMITTED\n"
                git status --porcelain | sed 's/^/    /'
            fi

            echo -e "\n    These are the branches:"
            git branch | sed 's/^/       /'
            git status -uno | grep "Your branch is ahead" | sed 's/^/    /'
            echo -e "\n    cd ${FULLPATH}"
            popd 1> /dev/null
        fi
    done
    IFS=$'\x20\t\n'

    echo ''
}

function main()
{
    check_git "$@"
}

main "$@"
exit $?



                   if [[ ! -e $REMOTE_LOCATION ]]
                   then
                       echo -e "       GIT FOLDER DOES NOT EXIST AT $REMOTE_LOCATION"
                   elif [[ "${REMOTE_NAME}" == heroku ]] || [[ "${REMOTE_NAME}" == heroku ]]
                   then
                       echo -e "       CANNOT CHECK HEROKU OR GITHUB"
                   else
                       # git push ${REMOTE_NAME} 2>&1 | sed 's/^/       /'
git push <<EOF
kwegner7
unicorn7
EOF

